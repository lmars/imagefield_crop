<?php

// $Id$

/**
 * Implementation of hook_init().
 *
 *
 Load required includes and css files.
 */
function imagefield_crop_init() {
  // field_file hooks and callbacks.
  module_load_include('inc', 'imagefield_crop', 'imagefield_crop_file');

  module_load_include('inc', 'imagefield_crop', 'imagefield_crop_widget');
//  drupal_add_css(drupal_get_path('module', 'imagefield_crop') .'/imagefield_crop.css');
}

/**
 * Implementation of CCK's hook_widget_info().
 */
function imagefield_crop_widget_info() {
  $module_path = drupal_get_path('module', 'imagefield_crop');
  return array(
    'imagefield_crop_widget' => array(
      'label' => t('Image with cropping'),
      'field types' => array('image', 'filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array('default value' => CONTENT_CALLBACK_CUSTOM),
      // callback for dynamic filefield widgets to determine
      // if this widget is appropriate for a file type.
      'suitability callback' => 'imagefield_handles_file',
      // description to use on forms to describe this widget.
      'description' => t('An edit widget for image files, including a crop interface.'),
    ),
  );
}

/**
 * Implementation of CCK's hook_widget_settings().
 *
 * Delegated to filefield.
 */
function imagefield_crop_widget_settings($op, $widget) {
  return imagefield_widget_settings($op, $widget);
}

/**
 * Implementation of hook_widget().
 */
function imagefield_crop_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = imagefield_widget($form, $form_state, $field, $items, $delta);

  return $element;
}

/**
 * Implementation of hook_elements().
 */
function imagefield_crop_elements() {
  $elements = array();
  $elements['imagefield_crop_widget'] =  array(
    // Indicate to FormAPI that this element needs processing and is not simply a render element.
    '#input' => TRUE,
    // Delegate element processing to filefield. Filefield will include
    '#process' => array('filefield_widget_process', 'imagefield_widget_widget_process', 'imagefield_crop_widget_widget_process'),
    // See imagefield_widget[#process] documentation.
    '#value_callback' => 'filefield_widget_value',
    // delegate to filefield...
    '#element_validate' => array('filefield_widget_validate', 'imagefield_widget_validate'),
    '#description' => t('Changes made to the attachments are not permanent until you save this post.'),
  );
  return $elements;
}

/**
 * Implementation of hook_theme().
 */
function imagefield_crop_theme() {
  return array(
    // imagefield_crop_widget form element type theme function.
    'imagefield_crop_widget' => array(
      'arguments' => array('element' => null),
      'file' => 'imagefield_crop_widget.inc',
    ),

    // display dynamic preview
    'imagefield_crop_preview' => array(
      'arguments' => array('file' => null),
    ),
    // display crop box
    'imagefield_crop_cropbox' => array(
      'arguments' => array('file' => null, 'alt' => '', 'title' => '', 'attributes' => null, 'getsize' => TRUE),
    ),
    'imagefield_crop_edit_crop_image_row' => array(
      'arguments' => array('element' => null),
    ),
  );
}

function theme_imagefield_crop_widget_preview($item = null) {
  return theme('imagefield_admin_thumbnail', $item);
}

function _imagefield_crop_verify_gd() {
  if (image_get_toolkit() != 'gd') {
    $toolkits = image_get_available_toolkits();
    drupal_set_message(t('Image cropping only works with %toolkit. Please select it at !url, or ask your system administrator to do so', array('%toolkit' => $toolkits['gd'], '!url' => l('Image Toolkit selection page', 'admin/settings/image-toolkit'))), 'error');
    return FALSE;
  }
  return TRUE;
}

